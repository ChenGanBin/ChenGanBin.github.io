<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[圆周率的来历]]></title>
    <url>%2Fposts%2F5d007e64.html</url>
    <content type="text"><![CDATA[圆周率是通过实际测量得出的，即一个圆的周长和其直径的比率。结束语不知道是学了忘记，还是说从来就不知道，今天才发现，所以特意记下圆周率是怎么来的。参考维基百科：圆周率]]></content>
      <categories>
        <category>数学</category>
      </categories>
      <tags>
        <tag>数学</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[深入操作系统-01环境创建]]></title>
    <url>%2Fposts%2Fd1f7f56f.html</url>
    <content type="text"><![CDATA[要开发一个操作系统，搭建开发环境是必不可少的，本篇文章就介绍如何使用Linux、bochs搭建开发环境。注意：本文章还没有涉及到C语言，所以环境搭建没有涉及到这部分，将会在后续进行补充。开发流程在不考虑其它的情况下，先要知道一个OS源码最后要怎么在机器上运行。编写一个汇编源码文件（a.asm）使用nasm把汇编文件a.asm编译成二进制文件a.bin把二进制文件a.bin写入到磁盘中（在开发环境中即a.img）在bochs使用已写入汇编源码的磁盘（a.img）进行测试运行即源码文件经历了如下流程：.asm -&gt; a.bin -&gt; a.img现在已经整个开发流程有了一个基本的认知了，下面逐一讲解需要用到的工具。Linux是基本的编译环境，其次把编译好的二进制文件写入到磁盘中也需要用到Linux中的指令，即源码的编译与文件的写入都离开不了Linux。Nasm是一个汇编指令的编译软件，能把汇编文件编译成二进制文件。Bochs已经写好的程序该放到哪里运行呢？放到自己的电脑上，程序有故障怎么办！所以最好的办法是使用虚拟机，可以随便折腾，有问题也不怕，但是我们需要调试程序，所以使用普通的虚拟机也不行。因此使用bochs就是一个极好的选择，既是虚拟机又带有调试功能。在这里省略bochs的安装过程，主要看看使用bochs时需要用到的配置文件（注意：文件后缀是bxrc的就是bochs用到的配置文件，例：bochsrc.bxrc）123456789101112131415161718192021# 为虚拟机分配的内存（RAM）大小，默认单位是MBmegs: 32# 这里还没研究romimage: file=$BXSHARE/BIOS-bochs-latestvgaromimage: file=$BXSHARE/VGABIOS-lgpl-latest# 使用的磁盘列表floppya: 1_44=boot.img, status=inserted# 选择引导磁盘 cdroom即光驱 floppy即软驱 disk即硬盘boot: floppy# 输出的日志文件log: bochsout.txt# 是否启用鼠标mouse: enabled=0# 键盘布局keyboard: keymap=$BXSHARE/keymaps/x11-pc-us.map注意：上文中提到的$BXSHARE即为bochs的安装目录。通过配置文件可以知道，要运行我们自己写的操作系统，只需要在配置文件中的磁盘列表加入我们创建的磁盘，并在以到磁盘项中选择我们的磁盘，然后运行bochs即可。总结以上便是开发一个操作系统需要的基本开发环境，目前涉及到的C语言部分将在后面完善。]]></content>
      <categories>
        <category>操作系统</category>
      </categories>
      <tags>
        <tag>操作系统</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[科学的重复]]></title>
    <url>%2Fposts%2Fab6871d9.html</url>
    <content type="text"><![CDATA[想要学习效果好，记忆是个绕不开的话题，通过科学的重复记忆，就能显著的提高记忆效果。遗忘曲线遗忘曲线（又名：艾宾浩斯遗忘曲线）揭示了人类大脑对于新事物的记忆规律：遗忘是先快后慢，最有趋于稳定。启示根据遗忘曲线的特性，在关键时间点上进行重复复习，即可事半功倍的进行记忆。关键时间点：一般记住后，在5分钟后重复一遍，30分钟后再重复一遍，12小时后，1天后，2天后，4天后，7天后，15天后就会记得很牢。总结并不需要一定要严格按照上述的时间点进行复习，只需要在大概的时间重复记忆一下内容即可，其本质是：重复记忆。计划在后续中进行尝试，并记录下心得。记录于2019-06-24 23：04，开始尝试。参考艾宾浩斯遗忘曲线如何利用遗忘曲线来有效记忆？]]></content>
      <categories>
        <category>学习</category>
        <category>记忆</category>
      </categories>
      <tags>
        <tag>学习</tag>
        <tag>记忆</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[架构师的思考层次]]></title>
    <url>%2Fposts%2Fb1bd9b76.html</url>
    <content type="text"><![CDATA[作为一个架构师，在面对一个产品的时候应该怎么进行思考呢？关注产品本身第一个层次是关注产品本身，即只会考虑产品本身系统的事情，不会考虑系统外的事情，例：后期与第三方系统对接的问题等。关注整个系统第二个层次是关注整个系统，在上了规模的产品中，大多是多个系统之间的配合，因此除了要关注自己的系统之外，还要考虑到与其它系统之间的协作。关注产品背后的价值第三个层次是关注产品可能潜在的价值，除了技术的要素，重点关注的是价值，即该产品可能带来的价值。总结以上内容是阅读别人文章后的心得，并计划在后续的工作中进行尝试，记录于2019-06-24 22：30。参考架构设计师—你在哪层楼？]]></content>
      <categories>
        <category>架构师</category>
      </categories>
      <tags>
        <tag>架构师</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[斐讯N1刷机后操作]]></title>
    <url>%2Fposts%2Fb9577586.html</url>
    <content type="text"><![CDATA[N1刷机成功后，为了方便使用，免不了要执行一些常见的配置操作或软件安装，例：更换国内软件源、安装docker、设置WIFI、安装Java环境等。阅读须知本示例系统使用的是armbian 5.67 stretch 4.19设置WiFi要设置WiFi可以使用系统自带的网络设置图形界面1nmtui执行命令后，通过方向键和回车键选中其中的Activate a connection选项，将会弹出一个列表（Wired代表的是有线连接，WiFi代表的是无线连接），按提示输入WiFi账号密码即可。如果图形界面中没有WiFi列表则说明系统的WiFi模块有问题，可按如下方法解决：方法一： 执行如下命令重新加载模块12modprobe dhd &amp;&amp; echo dhd &gt;&gt; /etc/modulesmodprobe wifi_dummy &amp;&amp; echo wifi_dummy &gt;&gt; /etc/modules方法二：使用armbian-config命令设置wifi12# 执行命令armbian-config依据提示选中Network中的WIFI方法三：重新安装系统。更换国内源重要的事情说三遍如果默认源的安装速度不是特别慢的话，无需特意跟换源！！！如果默认源的安装速度不是特别慢的话，无需特意跟换源！！！如果默认源的安装速度不是特别慢的话，无需特意跟换源！！！/etc/apt/sources.list文件记录的是系统所使用的软件源，而默认安装的系统使用的是国外源首先对/etc/apt/sources.list文件进行备份，以备不时之需1cp /etc/apt/sources.list /etc/apt/sources.list.bak然后编辑/etc/apt/sources.list文件，把原有的源删除，并加入新的国内源（这里使用的是科大的源，如果需要的可以自行更换为其它源，如：163、清华等），并保存。1234567891011vi /etc/apt/sources.list# 科大软件源deb http://mirrors.ustc.edu.cn/debian/ stretch main non-free contribdeb http://mirrors.ustc.edu.cn/debian/ stretch-updates main non-free contribdeb http://mirrors.ustc.edu.cn/debian/ stretch-backports main non-free contribdeb-src http://mirrors.ustc.edu.cn/debian/ stretch main non-free contribdeb-src http://mirrors.ustc.edu.cn/debian/ stretch-updates main non-free contribdeb-src http://mirrors.ustc.edu.cn/debian/ stretch-backports main non-free contribdeb http://mirrors.ustc.edu.cn/debian-security/ stretch/updates main non-free contribdeb-src http://mirrors.ustc.edu.cn/debian-security/ stretch/updates main non-free contrib最后执行更新命令，使软件列表生效1apt update等待命令执行完，至此新的软件源就生效了。安装docker安装docker有一个非常便捷的方法就是使用阿里提供的一键安装脚本1curl -fsSL https://get.docker.com | bash -s docker --mirror Aliyun通过脚本直接安装docker及其所需的依赖，可以说是非常方便了。注意：该脚本会直接安装最新的docker脚本安装JRE有时候需要运行Java程序，因此JRE（Java运行时环境）是必不可少的。执行如下命令12# 安装java8的jreapt-get install openjdk-8-jre注意点一：如果安装过程中遇到所需依赖无法下载的问题，可能是由apt源造成的。博主之前使用的是科大软件源，结果提示部分依赖缺少无法下载，然后跟换回默认源就可以了。注意点二：博主一开始是从Oracle官网下载的解压包：server-jre-8u212-linux-x64.tar.gz，并用其配置环境，但是在尝试执行命令的时候却报错：cannot execute binary file: Exec format error，这是因为该解压包的文件目标运行系统和本系统（参考：阅读须知）有差异而导致的，需要指定的版本才能在本系统运行。参考Armbian系统重新加载WiFi模块N1求教连接wifi问题，实在不知道咋回事了]]></content>
      <categories>
        <category>有趣</category>
        <category>刷机</category>
      </categories>
      <tags>
        <tag>有趣</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Java常用名词]]></title>
    <url>%2Fposts%2Fb0269417.html</url>
    <content type="text"><![CDATA[接触Java开发已经很长一段时间了，对于常见的名词，如：JMS、JDBC、JPA，也基本知道代表的是什么，而JNDI、JTA这些就不知道了，今天特意做个备忘录，记录下在Java中遇到的这些名词，并在后续中不断更新。名词全称中文JDBCJava DataBase ConnectivityJava数据库连接JPAJava Persistence APIJava持久化APIJTAJava Transaction APIJava事务APIJMSJava Message ServiceJava消息服务JNDIJava Naming and Directory InterfaceJava命名和目录接口POJOPlain Ordinary Java Object简单Java对象]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>Java</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[博客之2019]]></title>
    <url>%2Fposts%2F87daa986.html</url>
    <content type="text"><![CDATA[2019年的第三个月即将过去了，现在才写这篇文章好像迟了一点，不过种一棵树最好的时间是十年前，其次是现在，这样子安慰自己的话，好像还不算晚。在2018年里仅仅写了几篇文章，不过幸运的是因为有个博客，所以总想着弄点什么来写写，从而养成了写文档的习惯，遇到不懂的、特别的都有记录下来，期望在后面的时间里写到博客上。在前段时间，突然萌生了换个博客的想法，wordpress、typecho、hugo这些都研究了一圈，感觉就像换了一个博客所有的事情都将变得会不一样似的，就像2018年里的目标并没有达成，反而是东学学西学学但并没有实质性的进展。最后的最后，其实自己需要的是一点坚持——对目标的坚持，也是对适合自己的学习方法的一个概括：坚持！每天运动一下、学习一下、记录一下，明天就会有那么一点不一样！题外话：最后还是没忍住折腾劲，对博客进行了修改，当然博客程序还是那个，但是配置上做了很多修改，对以前的文章的结构、分类、命名、内容这些也不大满意，所以也进行了修改。]]></content>
      <categories>
        <category>日志</category>
      </categories>
      <tags>
        <tag>日志</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Conda]]></title>
    <url>%2Fposts%2Fc3592b96.html</url>
    <content type="text"><![CDATA[Conda是一个包管理、依赖管理和环境管理工具，虽然由Python程序创建，但它可以打包并分发任何语言的软件，例如：Python, R, Ruby, Lua, Scala, Java, JavaScript, C/ C++, FORTRAN。Conda简介Conda是一个开源的包管理、依赖管理和环境管理工具，能运行在Windows、macOS和Linux上，具备快速安装、运行和更新包和依赖的能力，能够轻松的创建、保存、加载和切换不同的开发环境。虽然Conda由Python程序创建，但它可以打包并分发任何语言的软件。通过以上摘录自官网的译文可以知道，Conda对于经常要切换不同的开发环境的开发者来说，是一个极其合适的工具。下载Conda作为一个管理工具，有两个常见的发行版本：Anaconda和Miniconda，其区别如下：Miniconda：仅仅拥有python，conda和一些必须的依赖包,除此之外没有任何附带的东西，操作时需要使用命令行的方式进行操作，占用极小的硬盘空间，但使用的时候需要自己安装所需要的包。&gt;&gt;&gt;下载&lt;&lt;&lt;Anaconda：拥有Miniconda所拥有的之外，还自带超过720个的开源包，并且具有图形化的操作界面，安装后即可使用，但占用较大的空间，以及会安装一些自己使用不到的包。&gt;&gt;&gt;下载&lt;&lt;&lt;综上来看：两个发行版该有的基本功能一样不缺，但相对而言，Miniconda更适合一些简约的人使用，如果需要省心的话Anaconda就是一个极好的选择，毕竟多占的一些硬盘空间对现在的硬盘来说不算什么，读者可以根据自身情况进行选择。博主比较喜欢简约因此使用的是Miniconda，同时为了更好的熟悉conda，下面将会直接使用命令行来进行操作演示。环境变量在安装conda的过程中，其中有一个选项就是把conda加入系统环境变量中，官方提示是不建议勾选，因为重装之类的可能会导致找不到相应目录之类的，建议直接使用官方提供的命令行工具，在命令行下找到一个名为Anaconda Prompt的应用，如下所示：运行后的效果如下所示：但是经过一段时间的使用后发现还是加入到系统的环境变量中更方便，这样就可以随时随地在任何环境中使用了，如果已经安装了程序但又没有加入系统环境变量的，可以按照如下步骤重新加入：找到程序的安装根目录，要是安装时没有指定安装目录的话，一般都是安装在安装时使用的用户的用户目录之下，这里假设路径是conda_rootdir打开系统环境变量的设置窗口：我的电脑点击鼠标右键-&gt;属性-&gt;高级系统设置-&gt;环境变量在系统变量部分，找到变量名为Path的条目，选中并点击下方的编辑按钮，就能打开编辑界面把如下的路径添加到系统环境变量中，记得把conda_rootdir替换为自己电脑下conda的安装根目录点击确定，保存编辑的内容，然后重新打开命令行窗口，然后输入命令conda info，并显示相应内容的话，就表示配置成功，配置失败的请重新配置conda配置文件conda安装后会在用户目录下生成一个配置文件.condarc，如果没有的话可以自己创建一个，内容如下：12channels: - defaults配置文件中的channels属性指的是安装时的下载来源，defaults指的是默认的下载来源，如果想添加下载源的话只要按照格式添加就可以了。默认源在国内下载速度较慢，所以国内有清华镜像源即Anaconda 镜像，使用后速度会有明显的提升，但是在这里依然不建议使用国内的清华源，因为使用一段时间后发现清华源的版本比较旧而且还不全，直接使用默认源的话使用上是基本没有问题，下载时间也就相对清华源慢一些而已。默认情况下环境文件以及下载下来的包都是安装在软件根目录下的envs和pkgs文件夹下，如果想要更改安装路径的话，可以加入如下配置1234567# 环境目录envs_dirs: - E:\Documents\Code\alpha\conda\envs# 包目录pkgs_dirs: - E:\Documents\Code\alpha\conda\pkgs如果有想了解更多的可以直接访问官网了解详细的配置&gt;&gt;&gt;传送门&lt;&lt;&lt;Conda信息如果想要查看Conda的信息的话，可以输入如下命令1conda info可以看到上一部分的配置信息也出现在内容展示中，说明配置是有效的。如果想要查看已有的开发环境，输入如下命令1conda info --env可以看到里面现在有两个环境，分别是base和tensorflow，其中base就是安装时默认的环境，而tensorflow就是博主自己创建的环境。在上述图片中还有个要注意的地方就是base环境前面是有个*号的，说明base环境处于激活的状态，即判断当前所处环境的方法就是查看*号出现在那个环境前。而上面这张则是激活了tensorflow环境的，而这张还有一个特别地方就是前面直接写着名为tensorflow的环境名称，因此也可以作为当前处于那个激活环境的判断。那么到底怎么创建一个新的环境呢？环境创建、克隆、激活和删除想要创建环境，只要输入如下命令：12345# 不指定python版本conda create --name env-name# 指定python版本conda create --name env-name python=2.7其中env-name是该新建环境的名称；python是该环境中的python版本，默认情况下如果不写该参数，将会延用base环境中的python版本，而base环境中的python版本就是下载部分选择conda安装包时的python版本。创建成功后就能看到如上的显示，想要激活环境，输入：1conda activate env-name想要取消激活，输入：1conda deactivate当然，也可以直接关闭命令窗口来退出已激活的环境。注意：在没有激活任何环境的情况下都是处于base环境之下的，就算激活了其它环境也只在激活的命令窗口下是激活环境，在激活环境下的任何操作，都不会对其它环境产生影响，当然这也就是conda的意义所在。在某些情况下如果想要复制已有的环境，可以输入：1conda create --name new-env-name --clone env-name如果想删除现有的环境，必须在先取消激活目标环境，然后执行如下命令：1conda remove --name env-name --all包的查看、搜索、安装、更新和卸载注意：以下的一切命令请先激活环境后再执行，否则都将会作用于基本环境，即操作的对象是基本环境。创建好环境后，想要使用当然还需要安装自己所需要的包，这里使用tensorflow做例子，输入如下命令，查看当前已安装的包：1conda list搜索可用的包1conda search tensorflow安装包1conda install tensorflow更新包1conda update tensorflow卸载已安装的包1conda uninstall tensorflow环境配置的导入和导出在某些情况下，如果想要分享自己的开发环境，可以通过导出目标环境的环境配置来完成分享。123conda activate tensorflowconda env export &gt; path-to/environment.yml注意：要先激活想要的分享目标环境，然后再执行导出命令导出命令的path-to是指定目标路径，environment.yml则是导出的环境配置文件，如果不写路径则将会导出到命令行当前的路径之下。别人拿到了你分享出来的环境配置文件又该如何使用呢，输入：1conda env create -f path-to/environment.yml即可创建一个和环境配置文件描述的一摸一样的开发环境了。结束语至此，conda的基本用法已经讲述完，如过想要更深入了解的话可以在官网上查阅更详细的资料。参考文献conda官网]]></content>
      <categories>
        <category>工具</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[博客之始]]></title>
    <url>%2Fposts%2F40124174.html</url>
    <content type="text"><![CDATA[以前总是看别人写的博客，用OneNote做的笔记，当面试的时候被问到：你有写博客吗？我的回答是NO！ 那时候以为写博客离自己很遥远，觉得自己的水平低写不出什么东西来，但是现在仔细想想，不正是因为自己的水平低才更要写博客吗！通过写博客来做笔记并且加入自己的思考，摆脱以前一贯的只记忆不思考的习惯，一次又一次地修改完善，才能更好的提高自己的能力。在这特殊的一天，踏出新的一步，祝2018年大家越来越好！]]></content>
      <categories>
        <category>日志</category>
      </categories>
      <tags>
        <tag>日志</tag>
      </tags>
  </entry>
</search>
